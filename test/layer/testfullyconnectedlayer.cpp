#include "testfullyconnectedlayer.h"

#include <fullyconnecteddescription.h>
#include <fullyconnectedlayer.h>
#include <randomdevice.h>
#include <testlayer.h>

#include "testutil.h"

bool __TestFullyConnectedLayer::checkGradients(std::vector<std::vector<number> > expected, FullyConnectedLayer * layer){
    number tol = 1e-5;
    bool passed = true;
    size_t rows = layer->connections.size();
    if(rows > 0){
    size_t cols = layer->connections[0].size();
    for(size_t i = 0; i < rows; i++){
        for (size_t j = 0; j < cols; j++){
            auto val = fabs(layer->connections[i][j].gradient - expected[i][j]);
            if(val > tol){
                passed = false;
                sDebug() << "Value missmatch for row @" << i << " and col @"<<j << "\texpected"<< expected[i][j]<<" calculated " << layer->connections[i][j].gradient;
                break;
            }
        }
    }
    }
    return passed;
}


int __TestFullyConnectedLayer::all(){

    int failed = 0;
    failed += !cycle_dd_dd();
    failed += !cycle_ds_dd();
    failed += !cycle_ds_sd();
    failed += !cycle_dd_sd();
    sDebug() << "Test: FullyConnected Layer" << " Failed: "<< failed;
    return failed;
}

bool __TestFullyConnectedLayer::cycle_dd_dd(){
    RandomDevice::setSeed(1024);
    TestLayer * input = new TestLayer(nullptr);
    input->setRightVectorSize(24);
    input->setSize(1);
    input->prepare();

    //


    FullyConnectedDescription descFC;
    FullyConnectedLayer * fcLayer = new FullyConnectedLayer(descFC, input);

    TestLayer * output = new TestLayer(fcLayer);
    output->setSize(1);
    output->prepare();

    output->setLeftVectorSize(8);

    fcLayer->init();
    //fcLayer->displayWeights();
    fcLayer->prepare();




    input->setOutput(0, RandomDevice::createUniformVector(24,-1.0,1.0), {});
    //input->displayOutput(0);

    output->setExpectedInput(0, { -0.356179519735578,
                                   0.292237472513218,
                                  -0.390875321794005,
                                  -0.582374149235733,
                                  -0.816042855754225,
                                  -1.056261113220583,
                                  -0.104716852436723,
                                  -0.312675801256296}, {});

    output->setErrorSignal(0, RandomDevice::createUniformVector(8,-1.0, 1.0), {});
    //output->displayLeftErrorSignal(0);

    input->setExpectedErrorSignal(0, {-0.182597353121958,
                                      0.312371786275476,
                                     -0.151908059045080,
                                     -0.241540242596904,
                                      0.210267209286103,
                                     -0.781962866486901,
                                     -0.047648034153387,
                                      0.130968198764771,
                                     -0.354561636050412,
                                     -0.240616268015574,
                                     -0.141546348641486,
                                     -0.317355946046808,
                                      0.609672180042401,
                                     -0.257220106876703,
                                      0.765828032974012,
                                     -0.282956260940119,
                                      0.502600082607697,
                                      0.138720617841222,
                                      0.199596509776119,
                                     -0.278805979021804,
                                     -0.304176698212160,
                                     -0.150970145928772,
                                      0.337071131978612,
                                     -0.303258193439869}, {});

    fcLayer->feedforward();
    bool chkFeedForward = output->controlInput();
    if(!chkFeedForward){
        sDebug() << "Feedforward not passed";
    }

    fcLayer->backprop();
    bool chkChanges = checkGradients({
                                         {0.492158046551297,  -0.439934267678564,   0.501683395089452,   0.195258262928477,   0.343667177371136,   0.071787093304397,   0.749442962308061,  -0.171580305297789},
                                         {0.145101986208010,  -0.129704952481098,   0.147910325931184,   0.057567608561887,   0.101322716108137,   0.021164847137132,   0.220956790491446,  -0.050586683012387},
                                         {0.120051773633622,  -0.107312863189194,   0.122375285347993,   0.047629213715884,   0.083830498093391,   0.017510976271922,   0.182811106092402,  -0.041853465804203},
                                         {0.155770960248204,  -0.139241822423882,   0.158785789933271,   0.061800406040085,  0.108772713562272,  0.022721043648095,   0.237203172249298,  -0.054306191076632},
                                         {0.178345452020504,  -0.159420894117729,   0.181797194001751,   0.070756586033157,   0.124536169879481,   0.026013801246011,   0.271578906030311,  -0.062176301536829},
                                        {-0.151213499488668,   0.135167962053682,  -0.154140122951185,  -0.059992283877890,  -0.105590301558273,  -0.022056283896490,  -0.230263212786757,   0.052717330518558},
                                         {0.515445920704253,  -0.460751023460700,   0.525421988517596,   0.204497469492845,   0.359928778767683,   0.075183906190814,   0.784905012585094,  -0.179699121163750},
                                         {0.393241375587631,  -0.351513823257229,   0.400852266414964,   0.156014167495365,   0.274595030033016,   0.057358922643392,   0.598815733050853,  -0.137095137937597},
                                        {-0.269453932029512,   0.240861688823688,  -0.274669010062965,  -0.106902868044130,  -0.188155965143779,  -0.039303054568311,  -0.410316065013688,   0.093939311254346},
                                         {0.048735268625023,  -0.043563881283475,   0.049678503065680,   0.019335178936433,   0.034031166053565,   0.007108617446194,   0.074212550913580,  -0.016990501990258},
                                        {-0.255488010118538,   0.228377716101076,  -0.260432788245710, -0.101362042954222,  -0.178403754454220,  -0.037265959073621,  -0.389049193605883,  0.089070393308086},
                                         {0.370047718592585,  -0.330781287080275,   0.377209713646902,   0.146812340546591,   0.258399219178644,   0.053975852447870,   0.563497153730799,  -0.129009168854965},
                                        {-0.583790290988260,   0.521843249223411,  -0.595089112644880,  -0.231612342684712,  -0.407652710113107,  -0.085152743885915,  -0.888977693468076,   0.203525914204901},
                                         {0.230557791265405,  -0.206092887780026,   0.235020063771928,   0.091471254290297,   0.160995326400392,   0.033629590717055,   0.351086231912575,  -0.080379009326995},
                                         {0.537378643961044,  -0.480356425854882,   0.547779203124016,   0.213199034923748,   0.375244096980077,   0.078383054232561,   0.818303481236035,  -0.187345492850207},
                                         {0.061730832641857,  -0.055180462540000,   0.062925586442155,   0.024491025261580,   0.043105789206244,   0.009004174723286,   0.094001791507913,  -0.021521125551429},
                                        {-0.501574946731285,   0.448351923578971,  -0.511282552284217,  -0.198994313947453,  -0.350242868913964,  -0.073160659979972,  -0.763782724943464,   0.174863304771562},
                                        {-0.382580507837965,   0.341984199431849,  -0.389985065594557,  -0.151784586098298,  -0.267150693089775,  -0.055803908531128,  -0.582581695300031,   0.133378455956992},
                                         {0.350530719729771,  -0.313335272203222,   0.357314977961762,   0.139069187057109,   0.244770767999314,   0.051129066485100,   0.533777275034098,  -0.122204987460708},
                                         {0.520051958137080,  -0.464868305945686,   0.530117172337919,   0.206324863913030,   0.363145111192800,   0.075855751426853,   0.791918943094507,  -0.181304916932965},
                                         {0.545786563148302,  -0.487872165557334,   0.556349851258409,   0.216534783890673,   0.381115231008866,   0.079609449053129,   0.831106799004993,  -0.190276732827239},
                                        {-0.480557272045753,   0.429564472300102,  -0.489858096325385,  -0.190655783919041,  -0.335566516500962,  -0.070094982634525,  -0.731777663789780,   0.167535945065746},
                                        {-0.462795249893729,   0.413687210386582,  -0.471752303604281,  -0.183608898033899,  -0.323163541358802,  -0.067504180857663,  -0.704730209031145,   0.161343598511817},
                                         {0.526052084287409,  -0.470231747877441,   0.536233426413526,   0.208705347616740,   0.367334916545783,   0.076730941051020,   0.801055748532993,  -0.183396731714645}
                                     }, fcLayer);
    if(!chkChanges){
        sDebug() << "Gradient calculation not passed";
    }

    bool chkBackProp = input->controlErrorSignal();

    if(!chkBackProp){
        sDebug() << "Backpropagation not passed";
    }

    delete input;
    delete fcLayer;
    delete output;

    return chkFeedForward && chkChanges && chkBackProp;
}

bool __TestFullyConnectedLayer::cycle_ds_dd()
{
        RandomDevice::setSeed(1024);
        TestLayer * input = new TestLayer(nullptr);
        input->setRightVectorSize(24);
        input->setSize(1);
        input->prepare();

        FullyConnectedDescription descFC;
        FullyConnectedLayer * fcLayer = new FullyConnectedLayer(descFC, input);

        TestLayer * output = new TestLayer(fcLayer);
        output->setSize(1);
        output->prepare();

        output->setLeftVectorSize(8);

        fcLayer->init();
        //fcLayer->displayWeights();
        fcLayer->prepare();

        std::vector<number> v = RandomDevice::createUniformVector(24,-1.0,1.0);
        std::vector<size_t> mask = RandomDevice::createMask(24,0.5);

        auto vec = applyMask(v,mask);

        input->setOutput(0, vec , mask);
        //input->displayOutput(0);
        //input->displayActiveOutput(0);

        output->setExpectedInput(0, {     -0.753487148456918,
                                          1.144826446203802,
                                          0.832699647620724,
                                         -0.779726293077124,
                                          0.227139616175930,
                                         -0.741775317488713,
                                          0.007326196849637,
                                          0.134577273927201}, {});

        output->setErrorSignal(0, RandomDevice::createUniformVector(8,-1.0, 1.0), {});
        //output->displayLeftErrorSignal(0);

        input->setExpectedErrorSignal(0, {  -0.554257194703626,
                                            -1.039571514137293,
                                             0.391349880029024,
                                             0.089096864629990,
                                             0.064217914002543,
                                            -0.543903990132985,
                                             0.919540693050245,
                                            -0.321512324502540,
                                             0.138593134803378,
                                             0.664606248270605,
                                            -1.071565984809332,
                                            -0.392560491919584,
                                             0.463823917322688,
                                             0.041927677941892,
                                            -0.279606425676590,
                                            -0.345638329496314,
                                            -0.317159327061929,
                                            -0.917324832190218,
                                             0.187448449816296,
                                            -0.624449492739454,
                                            -0.980342414301918,
                                             0.290732987804200,
                                             0.442635927058714,
                                             0.973358643368430,}, {});

        fcLayer->feedforward();
        bool chkFeedForward = output->controlInput();
        if(!chkFeedForward){
            sDebug() << "Feedforward not passed";
        }
        fcLayer->backprop();
        bool chkChanges =  checkGradients({{0.663523545756870,   0.555641336389356,   0.591513474011953,  -0.654275693620861,   0.525073320338472,   0.429114687741414,  -0.752773808655470,  -0.802397443247613},
                                           {0                ,   0                 ,  0                ,   0                ,   0                ,   0                ,   0                ,   0},
                                           {0.195625338363879,   0.163818639346304,   0.174394750932897,  -0.192898812357658,   0.154806331461667,   0.126515037067100,  -0.221938817350804,  -0.236569255667594},
                                           {0.161852841935562,   0.135537208839977,   0.144287474686079,  -0.159597019727617,   0.128080773719014,   0.104673650500247,  -0.183623597149918,  -0.195728256189182},
                                           {0.210009163914113,   0.175863800519909,   0.187217546258262,  -0.207082163497165,   0.166188840928179,   0.135817360773601,  -0.238257405005647,  -0.253963581640551},
                                           {0.240443913339375,   0.201350167886177,   0.214349310426005,  -0.237092728936372,   0.190273102951109,   0.155500155875036,  -0.272785919309078,  -0.290768251619302},
                                          {-0.203864831734633 , -0.170718474532220,  -0.181740038645744,   0.201023467879995,  -0.161326579567036,  -0.131843691411846 ,  0.231286601383123,   0.246533255372845},
                                           {                0 ,                  0,                   0,                   0,                   0,                   0 ,                  0,                   0},
                                           {0.694920071607431,   0.581933105073599,   0.619502636109565,  -0.685234630736994,   0.549918675384074,   0.449419483965579 , -0.788393467511911,  -0.840365187166347},
                                           {0.530164880360273,   0.443965439529446,   0.472627794727795,  -0.522775713159455,   0.419541153946661,   0.342868822880664 , -0.601477127309678,  -0.641127126868587},
                                          {-0.363275638082486,  -0.304210698041771,  -0.323850503995254,   0.358212487864102,  -0.287474870644517,  -0.234938025932465 ,  0.412139685802954,   0.439308363743192},
                                           {                0,                   0,                   0,                   0,                   0,                   0 ,                  0,                   0},
                                           {                0,                   0,                   0,                   0,                   0,                   0 ,                  0,                   0},
                                           {0.065704499739634,   0.055021613438722,   0.058573802162327,  -0.064788743995700,   0.051994658004359,   0.042492487371820 , -0.074542383357908,  -0.079456295014833},
                                           {                0,                   0,                   0,                   0,                   0,                   0 ,                  0,                   0},
                                          {-0.344446893757227,  -0.288443316874481,  -0.307065182602609,   0.339646168956209,  -0.272574915151016,  -0.222761079397011 ,  0.390778295286275,   0.416538808084219},
                                          {                 0,                   0,                   0,                   0 ,                  0,                   0 ,                  0,                   0},
                                           {0.498895377329161,   0.417780041040505,   0.444751870072458,  -0.491942028483618 ,  0.394796317253411,   0.322646174996000 , -0.566001577056757,  -0.603312991342820},
                                           {                0,                   0,                   0,                   0,                   0,                   0 ,                  0,                   0},
                                          {-0.787061405516593,  -0.659093191158539,  -0.701644168040484,   0.776091745816161,  -0.622833881551947,  -0.509009230224554 ,  0.892928692079227,   0.951791482764948},
                                           {0.310836171905093,   0.260297358036460,   0.277102124058655,  -0.306503896170971,   0.245977376247190,   0.201024315864543 , -0.352646609889293,  -0.375893442215408},
                                           {                0,                   0,                   0,                   0,                   0,                   0 ,                  0,                   0},
                                           {                0,                   0,                   0,                   0,                   0,                   0 ,                  0,                   0},
                                           {0.724489593848154,   0.606694922433809,   0.645863073410299,  -0.714392028086049,   0.573318247747477,   0.468542718376977 , -0.821940373299379,  -0.876123539971967}
                            }, fcLayer);

        if(!chkChanges){
            sDebug() << "Gradient calculation not passed";
        }

        bool chkBackProp = input->controlErrorSignal();

        if(!chkBackProp){
            sDebug() << "Backpropagation not passed";
        }

        delete input;
        delete fcLayer;
        delete output;

        return chkFeedForward && chkChanges && chkBackProp;

}

bool __TestFullyConnectedLayer::cycle_ds_sd(){
RandomDevice::setSeed(1024);
TestLayer * input = new TestLayer(nullptr);
input->setRightVectorSize(24);
input->setSize(1);
input->prepare();

FullyConnectedDescription descFC;
FullyConnectedLayer * fcLayer = new FullyConnectedLayer(descFC, input);

TestLayer * output = new TestLayer(fcLayer);
output->setSize(1);
output->prepare();

output->setLeftVectorSize(8);

fcLayer->init();
//fcLayer->displayWeights();
fcLayer->prepare();

std::vector<number> v = RandomDevice::createUniformVector(24,-1.0,1.0);
std::vector<size_t> mask = RandomDevice::createMask(24,0.5);

auto vec = applyMask(v,mask);

input->setOutput(0, vec , mask);
//input->displayOutput(0);
//input->displayActiveOutput(0);

output->setExpectedInput(0, {     -0.753487148456918,
                                  1.144826446203802,
                                  0.832699647620724,
                                 -0.779726293077124,
                                  0.227139616175930,
                                 -0.741775317488713,
                                  0.007326196849637,
                                  0.134577273927201}, {});

auto e = RandomDevice::createUniformVector(8,-1.0, 1.0);
std::vector<size_t> errmask = RandomDevice::createMask(8,0.5);
auto err = applyMask(e, errmask);
output->setErrorSignal(0, err, errmask);

//output->displayLeftErrorSignal(0);
//output->displayActiveLeftErrorSignal(0);

input->setExpectedErrorSignal(0, {     0.080338233794233, // todo review
                                       1.279219916277665,
                                      -0.761080195111177,
                                       0.411533713220850,
                                       0.587197664614364,
                                      -0.078118263951463,
                                       0.152315453285170,
                                      -0.303616986752177,
                                      -0.845338510734738,
                                       0.130137596944634,
                                       0.670006951560753,
                                      -0.607455953101895,
                                       0.183745821890175,
                                      -0.102876962368634,
                                       0.460779691246195,
                                      -0.052328816260010,
                                       0.249044734166362,
                                       0.737071035286753,
                                       0.557539118956104,
                                       0.341470231510258,
                                       0.001330014059543,
                                       0.112162466792450,
                                       0.429991027592814,
                                       0.199764109991761}, {});

fcLayer->feedforward();
bool chkFeedForward = output->controlInput();
if(!chkFeedForward){
    sDebug() << "Feedforward not passed";
}
fcLayer->backprop();
bool chkChanges =  checkGradients({
                                      {0.663523545756870,   0.555641336389356,  0,   0.591513474011953,  -0.654275693620861,  0,   0.525073320338472       ,            0},
                                      {                0,  0,  0,  0,  0,  0,  0      ,             0},
                                      {0.195625338363879,   0.163818639346304,  0,   0.174394750932897, -0.192898812357658,  0,   0.154806331461667      ,             0},
                                       {0.161852841935562,   0.135537208839977,  0,   0.144287474686079,  -0.159597019727617,  0,   0.128080773719014   ,                0},
                                      {0.210009163914113,   0.175863800519909,  0,   0.187217546258262,  -0.207082163497165,                  0,   0.166188840928179                ,   0},
                                      {0.240443913339375,   0.201350167886177,  0,   0.214349310426005,  -0.237092728936372,  0,   0.190273102951109              ,     0},
                                     {-0.203864831734633,  -0.170718474532220,  0,  -0.181740038645744,   0.201023467879995,  0,  -0.161326579567036             ,      0},
                                      {                0,  0,  0,  0,  0,  0,  0            ,       0},
                                      {0.694920071607431,   0.581933105073599,  0,   0.619502636109565,  -0.685234630736994,  0,   0.549918675384074             ,      0},
                                      {0.530164880360273,   0.443965439529446,  0,   0.472627794727795,  -0.522775713159455,  0,   0.419541153946661            ,       0},
                                     {-0.363275638082486,  -0.304210698041771,  0,  -0.323850503995254,   0.358212487864102,  0,  -0.287474870644517           ,        0},
                                      {                0,  0,  0,  0,  0,  0,  0           ,        0},
                                      {                0,  0 ,                  0,  0,  0,  0,  0          ,         0},
                                      {0.065704499739634,   0.055021613438722,  0,   0.058573802162327,  -0.064788743995700,  0,   0.051994658004359         ,          0},
                                      {                0,  0,  0,  0,  0,  0,  0       ,            0},
                                     {-0.344446893757227,  -0.288443316874481,  0,  -0.307065182602609,   0.339646168956209,  0,  -0.272574915151016      ,             0},
                                     {                 0,  0,  0,  0,  0,  0,  0        ,           0},
                                      {0.498895377329161,   0.417780041040505,  0,   0.444751870072458,  -0.491942028483618,  0,   0.394796317253411     ,              0},
                                      {                0,  0,  0,  0,  0,  0,  0    ,               0},
                                     {-0.787061405516593,  -0.659093191158539,  0,  -0.701644168040484,   0.776091745816161,                  0,  -0.622833881551947    ,               0},
                                      {0.310836171905093,   0.260297358036460,  0,   0.277102124058655,  -0.306503896170971,                  0,   0.245977376247190   ,                0},
                                      {                0,  0,  0,  0,  0,                  0,  0  ,                 0},
                                      {                0,  0,  0,  0,  0,                  0,  0 ,                  0},
                                      {0.724489593848154,   0.606694922433809,  0,   0.645863073410299,  -0.714392028086049,                  0,   0.573318247747477,  0}
                    }, fcLayer);

if(!chkChanges){
    sDebug() << "Gradient calculation not passed";
}

bool chkBackProp = input->controlErrorSignal();

if(!chkBackProp){
    sDebug() << "Backpropagation not passed";
}

delete input;
delete fcLayer;
delete output;

return chkFeedForward && chkChanges && chkBackProp;
}

bool __TestFullyConnectedLayer::cycle_dd_sd()
{
    RandomDevice::setSeed(1024);
    TestLayer * input = new TestLayer(nullptr);
    input->setRightVectorSize(24);
    input->setSize(1);
    input->prepare();

    FullyConnectedDescription descFC;
    FullyConnectedLayer * fcLayer = new FullyConnectedLayer(descFC, input);

    TestLayer * output = new TestLayer(fcLayer);
    output->setSize(1);
    output->prepare();

    output->setLeftVectorSize(8);

    fcLayer->init();
    //fcLayer->displayWeights();
    fcLayer->prepare();

    std::vector<number> v = RandomDevice::createUniformVector(24,-1.0,1.0);

    input->setOutput(0, v , {});
    //input->displayOutput(0);
    //input->displayActiveOutput(0);

    output->setExpectedInput(0, {    -0.356179519735578,
                                     0.292237472513218,
                                    -0.390875321794005,
                                    -0.582374149235733,
                                    -0.816042855754225,
                                    -1.056261113220583,
                                    -0.104716852436723,
                                    -0.312675801256296}, {});

    auto e = RandomDevice::createUniformVector(8,-1.0, 1.0);
    std::vector<size_t> errmask = RandomDevice::createMask(8,0.5);
    auto err = applyMask(e, errmask);
    output->setErrorSignal(0, err, errmask);

    //output->displayLeftErrorSignal(0);
    //output->displayActiveLeftErrorSignal(0);

    input->setExpectedErrorSignal(0, {-0.012031699667617,
                                      -0.149968865396422,
                                      -0.387656311397042,
                                       0.318831507987762,
                                      -0.203222055956110,
                                      -0.277288221896008,
                                       0.314830281671282,
                                      -0.342935540822846,
                                       0.263837012172768,
                                      -0.180109483395154,
                                       0.286560703019432,
                                      -0.157283352264983,
                                       0.164983679411170,
                                      -0.290735618299250,
                                       0.538660588202804,
                                       0.612347848495961,
                                       0.419662300077900,
                                      -0.259070857941305,
                                       0.344057602538614,
                                      -0.226351470244954,
                                      -0.385610812936867,
                                       0.445599907584457,
                                       0.010325209931092,
                                      -0.031822928406237}, {});

    fcLayer->feedforward();
    bool chkFeedForward = output->controlInput();
    if(!chkFeedForward){
        sDebug() << "Feedforward not passed";
    }
    fcLayer->backprop();
    bool chkChanges =  checkGradients({   { 0.492158046551297,  -0.439934267678564,  0.501683395089452,                   0,                 0,   0.195258262928477,                   0,   0.343667177371136},
                                          {  0.145101986208010,  -0.129704952481098,   0.147910325931184,                  0,                   0,   0.057567608561887,                   0,   0.101322716108137},
                                          {  0.120051773633622,  -0.107312863189194,   0.122375285347993,                  0,                   0,   0.047629213715884,                   0,   0.083830498093391},
                                          {  0.155770960248204,  -0.139241822423882,   0.158785789933271,                   0,                   0,   0.061800406040085,                   0,   0.108772713562272},
                                          {  0.178345452020504,  -0.159420894117729,   0.181797194001751,                   0,                   0,   0.070756586033157,                   0,   0.124536169879481},
                                          { -0.151213499488668,   0.135167962053682,  -0.154140122951185,                   0,                   0,  -0.059992283877890,                   0,  -0.105590301558273},
                                          {  0.515445920704253,  -0.460751023460700,   0.525421988517596 ,                  0,                   0,   0.204497469492845,                   0,   0.359928778767683},
                                          {  0.393241375587631,  -0.351513823257229,   0.400852266414964,                   0,                   0,   0.156014167495365,                   0,   0.274595030033016},
                                          { -0.269453932029512,   0.240861688823688,  -0.274669010062965,                   0,                   0,  -0.106902868044130,                   0,  -0.188155965143779},
                                          {  0.048735268625023,  -0.043563881283475,   0.049678503065680,                   0,                   0,   0.019335178936433,                   0,   0.034031166053565},
                                          { -0.255488010118538,  0.228377716101076, -0.260432788245710,                   0,                   0,  -0.101362042954222,                   0,  -0.178403754454220},
                                          {  0.370047718592585,  -0.330781287080275,   0.377209713646902,                   0,                   0,   0.146812340546591,                   0,   0.258399219178644},
                                          { -0.583790290988260,   0.521843249223411,  -0.595089112644880,                   0,                   0,  -0.231612342684712,                   0,  -0.407652710113107},
                                          {  0.230557791265405,  -0.206092887780026,   0.235020063771928,                   0,                   0,   0.091471254290297,                   0,   0.160995326400392},
                                          {  0.537378643961044,  -0.480356425854882,   0.547779203124016,                   0,                   0,   0.213199034923748,                   0,   0.375244096980077},
                                          {  0.061730832641857,  -0.055180462540000,   0.062925586442155,                   0,                   0,   0.024491025261580,                   0,   0.043105789206244},
                                          { -0.501574946731285,   0.448351923578971,  -0.511282552284217,                   0,                   0,  -0.198994313947453,                   0,  -0.350242868913964},
                                          { -0.382580507837965,   0.341984199431849,  -0.389985065594557,                   0,                   0,  -0.151784586098298,                   0,  -0.267150693089775},
                                          {  0.350530719729771,  -0.313335272203222,   0.357314977961762,                   0,                   0,   0.139069187057109,                   0,   0.244770767999314},
                                          {  0.520051958137080,  -0.464868305945686,   0.530117172337919,                   0,                   0,   0.206324863913030,                   0,   0.363145111192800},
                                          {  0.545786563148302,  -0.487872165557334,   0.556349851258409,                   0,                   0,   0.216534783890673,                   0,   0.381115231008866},
                                          { -0.480557272045753,   0.429564472300102,  -0.489858096325385,                   0,                   0,  -0.190655783919041,                   0,  -0.335566516500962},
                                          { -0.462795249893729,   0.413687210386582,  -0.471752303604281,                   0,                   0,  -0.183608898033899,                   0,  -0.323163541358802},
                                          {  0.526052084287409,  -0.470231747877441,   0.536233426413526,                   0 ,                  0,   0.208705347616740,                   0,   0.367334916545783},
                        }, fcLayer);

    if(!chkChanges){
        sDebug() << "Gradient calculation not passed";
    }

    bool chkBackProp = input->controlErrorSignal();

    if(!chkBackProp){
        sDebug() << "Backpropagation not passed";
    }

    delete input;
    delete fcLayer;
    delete output;

    return chkFeedForward && chkChanges && chkBackProp;
}
